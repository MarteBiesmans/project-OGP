in world heb ik 1 methode gemaakt voor het aantal cubes op x- y- of z-as: in de opgave staat dat het een
'cubical world' is

extra uitleg bij arrays: https://www.youtube.com/watch?v=1q3brvLgYbs

in UnitTest zitten nog 2 failures: Constructor_IllegalPositionX() en Constructor_IllegalPositionZ()
hierin zijn de opgegeven coördinaten te groot (y is wel juist, hier is de gegeven waarde te klein)

in unit mss best een onderverdeling maken in unitWeight/carriedWeight/totalWeight
we hebben ze niet alle 3 nodig, maar ik weet nog niet welke de minste aanpassingen nodig heeft voor de rest
want hun eigen gewicht moet aan voorwaarden voldoen en het totale gewicht bepaalt hun bewegingen

abstracte klasse object aanmaken boven unit en material, want materials kunnen net zoals unit vallen

uit IFacade: Your <code>Facade</code> class should offer a <b>default constructor

alternatieve optie:
in world geen set aanmaken van units om opslagruimte te besparen, en dan om alle units op te vragen
via getAllUnits itereren over alle factions.
mogelijke nadelen:
1) Als ik dan in een functie getAllUnits gebruik om er weer over te itereren, 
worden het misschien te veel iteraties over elkaar?
2) addUnit wordt ingewikkelder, maar addFaction mss juist makkelijker

ik dacht om deze invariant te gebruiken en dus als een faction leeg is, die direct weg te halen 
uit de world (faction.world wordt dan null)
@invar	Each faction in a world should always be active, i.e. non-empty